// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.WaitUntilCommand;

public class ShooterAuto extends ParallelRaceGroup {
  private double prev_time = 0.0;
  private boolean end = false;
  private Command auto;
  /** Creates a new ModifiedWaitCommand. */
  public ModifiedWaitCommand(m_launcher, m_drivetrain) {
    // Use addRequirements() here to declare subsystem dependencies.
    Command auto = new ParallelRaceGroup(
        new ModifiedWaitCommand(),
        new WaitCommand(2.5)
          .andThen(new RunCommand(() -> m_launcher.m_feedWheel.set(ControlMode.PercentOutput, 1))),
        new RunCommand(() -> m_launcher.m_launchWheel.set(ControlMode.PercentOutput, 1))
      )
      .andThen(new RunCommand(() -> m_drivetrain.arcadeDrive(0.5, 0)).withTimeout(5));
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    auto.schedule();
    prev_time = Timer.getFPGATimestamp();
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    if ((Timer.getFPGATimestamp() - prev_time) > 5) {
      end = true;
      if (!auto.isFinished()) {
        auto.cancel();
      }
      this.cancel();
    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return end;
  }
}
